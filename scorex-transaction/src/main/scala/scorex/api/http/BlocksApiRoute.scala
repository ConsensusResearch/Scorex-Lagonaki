package scorex.api.http

import javax.ws.rs.Path

import akka.actor.ActorRefFactory
import akka.http.scaladsl.server.Route
import io.swagger.annotations._
import play.api.libs.json.{JsArray, Json}
import scorex.account.Account
import scorex.app.Application
import scorex.transaction.BlockChain

@Path("/blocks")
@Api(value = "/blocks", description = "Info about blockchain & individual blocks within it")
case class BlocksApiRoute(override val application: Application)(implicit val context: ActorRefFactory)
  extends ApiRoute with CommonTransactionApiFunctions {

  private val wallet = application.wallet
  private val history = application.history

  override lazy val route =
    pathPrefix("blocks") {
      signature ~ first ~ last ~ at ~ seq ~ height ~ heightEncoded ~ child ~ address ~ delay
    }

  @Path("/address/{address}")
  @ApiOperation(value = "Address", notes = "Get list of blocks generated by specified address", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "address", value = "Wallet address ", required = true, dataType = "String", paramType = "path")
  ))
  def address: Route = {
    path("address" / Segment) { case address =>
      getJsonRoute {
        JsArray(history.generatedBy(new Account(address)).map(_.json))
      }
    }
  }

  @Path("/child/{signature}")
  @ApiOperation(value = "Child", notes = "Get children of specified block", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "signature", value = "Base58-encoded signature", required = true, dataType = "String", paramType = "path")
  ))
  def child: Route = {
    path("child" / Segment) { case encodedSignature =>
      getJsonRoute {
        withBlock(history, encodedSignature) { block =>
          history match {
            case blockchain: BlockChain =>
              blockchain.children(block).headOption.map(_.json).getOrElse(
                Json.obj("status" -> "error", "details" -> "No child blocks"))
            case _ =>
              Json.obj("status" -> "error", "details" -> "Not available for other option than linear blockchain")
          }
        }
      }
    }
  }

  @Path("/delay/{signature}/{blockNum}")
  @ApiOperation(value = "Average delay", notes = "Average delay in milliseconds between last $blockNum blocks starting from $height", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "signature", value = "Base58-encoded signature", required = true, dataType = "String", paramType = "path"),
    new ApiImplicitParam(name = "blockNum", value = "Number of blocks to count delay", required = true, dataType = "String", paramType = "path")
  ))
  def delay: Route = {
    path("delay" / Segment / IntNumber) { case (encodedSignature, count) =>
      getJsonRoute {
        withBlock(history, encodedSignature) { block =>
          history.averageDelay(block, count).map(d => Json.obj("delay" -> d))
            .getOrElse(Json.obj("status" -> "error", "details" -> "Internal error"))
        }
      }
    }
  }

  @Path("/height/{signature}")
  @ApiOperation(value = "Height", notes = "Get height of a block by its Base58-encoded signature", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "signature", value = "Base58-encoded signature", required = true, dataType = "String", paramType = "path")
  ))
  def heightEncoded: Route = {
    path("height" / Segment) { case encodedSignature =>
      getJsonRoute {
        withBlock(history, encodedSignature) { block =>
          Json.obj("height" -> history.heightOf(block))
        }
      }
    }
  }

  @Path("/height")
  @ApiOperation(value = "Height", notes = "Get blockchain height", httpMethod = "GET")
  def height: Route = {
    path("height") {
      getJsonRoute {
        Json.obj("height" -> history.height())
      }
    }
  }

  @Path("/at/{height}")
  @ApiOperation(value = "At", notes = "Get block at specified height", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "height", value = "Block height", required = true, dataType = "Long", paramType = "path")
  ))
  def at: Route = {
    path("at" / IntNumber) { case height =>
      getJsonRoute {
        history match {
          case blockchain: BlockChain =>
            blockchain
              .blockAt(height)
              .map(_.json)
              .getOrElse(Json.obj("status" -> "error", "details" -> "No block for this height"))
          case _ =>
            Json.obj("status" -> "error", "details" -> "Not available for other option than linear blockchain")
        }
      }
    }
  }

  @Path("/seq/{from}/{to}")
  @ApiOperation(value = "Seq", notes = "Get block at specified heights", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "from", value = "Start block height", required = true, dataType = "Int", paramType = "path"),
    new ApiImplicitParam(name = "to", value = "End block height", required = true, dataType = "Int", paramType = "path")
  ))
  def seq: Route = {
    path("seq" / IntNumber / IntNumber) { case (start, end) =>
      getJsonRoute {
        history match {
          case blockchain: BlockChain =>
            JsArray(
              (start to end).map { height =>
                blockchain.blockAt(height).map(_.json).getOrElse(Json.obj("error" -> s"No block at height $height"))
              })
          case _ =>
            Json.obj("status" -> "error", "details" -> "Not available for other option than linear blockchain")
        }
      }
    }
  }


  @Path("/last")
  @ApiOperation(value = "Last", notes = "Get last block data", httpMethod = "GET")
  def last: Route = {
    path("last") {
      getJsonRoute {
        history.lastBlock.json
      }
    }
  }

  @Path("/first")
  @ApiOperation(value = "First", notes = "Get genesis block data", httpMethod = "GET")
  def first: Route = {
    path("first") {
      getJsonRoute {
        history.genesis.json
      }
    }
  }

  @Path("/signature/{signature}")
  @ApiOperation(value = "Signature", notes = "Get block by a specified Base58-encoded signature", httpMethod = "GET")
  @ApiImplicitParams(Array(
    new ApiImplicitParam(name = "signature", value = "Base58-encoded signature", required = true, dataType = "String", paramType = "path")
  ))
  def signature: Route = {
    path("signature" / Segment) { case encodedSignature =>
      getJsonRoute {
        withBlock(history, encodedSignature)(_.json)
      }
    }
  }
}
